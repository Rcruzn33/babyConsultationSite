This is the correct way to replicate your working Replit site on a Hostinger VPS:

ðŸ”¹ Step 1: SSH into Your VPS
From Hostinger dashboard, get:

IP address

SSH port (usually 22)

Username/password

Open a terminal or Replit shell and run:

bash
Copy
Edit
ssh root@your-vps-ip
ðŸ”¹ Step 2: Install Node.js, NPM, and PostgreSQL
bash
Copy
Edit
sudo apt update
sudo apt install nodejs npm
sudo apt install postgresql postgresql-contrib
Verify:

bash
Copy
Edit
node -v
npm -v
psql --version
ðŸ”¹ Step 3: Create Your PostgreSQL Database
Inside the VPS:

bash
Copy
Edit
sudo -u postgres psql
In the psql shell:

sql
Copy
Edit
CREATE DATABASE your_database;
CREATE USER your_user WITH PASSWORD 'your_password';
GRANT ALL PRIVILEGES ON DATABASE your_database TO your_user;
\q
ðŸ”¹ Step 4: Upload Your App Code (The Right Way)
Instead of FileZilla, try one of these:

Use scp from your local machine or Replit:

bash
Copy
Edit
scp -r /path/to/your-project root@your-vps-ip:/var/www/myapp
Or clone directly from GitHub into your VPS:

bash
Copy
Edit
git clone https://github.com/yourname/your-repo.git /var/www/myapp
ðŸ”¹ Step 5: Install Dependencies and Configure Environment
Go to your app folder:

bash
Copy
Edit
cd /var/www/myapp
npm install
Add your .env file or manually set environment variables (or use a .env parser like dotenv):

bash
Copy
Edit
export DATABASE_URL=postgresql://your_user:your_password@localhost:5432/your_database
export PORT=3000
ðŸ”¹ Step 6: Run Your App with PM2 (Keeps It Alive)
Install PM2:

bash
Copy
Edit
npm install -g pm2
Start your app:

bash
Copy
Edit
pm2 start server.js --name sleepservice
Save and auto-start:

bash
Copy
Edit
pm2 save
pm2 startup
ðŸ”¹ Step 7: Set Up Nginx as a Reverse Proxy (So Visitors See Your Site)
bash
Copy
Edit
sudo apt install nginx
Then configure /etc/nginx/sites-available/default or create your own file:

nginx
Copy
Edit
server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;

    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
Reload Nginx:

bash
Copy
Edit
sudo systemctl restart nginx
